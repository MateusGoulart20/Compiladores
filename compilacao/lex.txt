(TOKEN:write, LEXEMA:write, LINHA:1, COLUNA:1)
(TOKEN:aspas, LEXEMA:", LINHA:1, COLUNA:7)
(TOKEN:id, LEXEMA:entre, LINHA:1, COLUNA:8)
(TOKEN:id, LEXEMA:com, LINHA:1, COLUNA:14)
(TOKEN:id, LEXEMA:alguma, LINHA:1, COLUNA:18)
(TOKEN:id, LEXEMA:coisa, LINHA:1, COLUNA:25)
(TOKEN:aspas, LEXEMA:", LINHA:1, COLUNA:30)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:1, COLUNA:31)
(TOKEN:read, LEXEMA:read, LINHA:2, COLUNA:1)
(TOKEN:id, LEXEMA:algumacoisa, LINHA:2, COLUNA:6)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:2, COLUNA:17)
(TOKEN:if, LEXEMA:if, LINHA:3, COLUNA:1)
(TOKEN:id, LEXEMA:algumacoisa, LINHA:3, COLUNA:4)
(TOKEN:condicao, LEXEMA:<, LINHA:3, COLUNA:16)
(TOKEN:number, LEXEMA:458, LINHA:3, COLUNA:18)
(TOKEN:unary, LEXEMA:+, LINHA:3, COLUNA:21)
(TOKEN:id, LEXEMA:xt, LINHA:3, COLUNA:22)
(TOKEN:binary, LEXEMA:*, LINHA:3, COLUNA:24)
(TOKEN:openP, LEXEMA:(, LINHA:3, COLUNA:25)
(TOKEN:openP, LEXEMA:(, LINHA:3, COLUNA:26)
(TOKEN:id, LEXEMA:v, LINHA:3, COLUNA:27)
(TOKEN:closeP, LEXEMA:), LINHA:3, COLUNA:28)
(TOKEN:closeP, LEXEMA:), LINHA:3, COLUNA:29)
(TOKEN:openC, LEXEMA:{, LINHA:3, COLUNA:31)
(TOKEN:write, LEXEMA:write, LINHA:4, COLUNA:2)
(TOKEN:aspas, LEXEMA:", LINHA:4, COLUNA:8)
(TOKEN:id, LEXEMA:banana, LINHA:4, COLUNA:9)
(TOKEN:aspas, LEXEMA:", LINHA:4, COLUNA:15)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:4, COLUNA:16)
(TOKEN:closeC, LEXEMA:}, LINHA:5, COLUNA:1)
(TOKEN:else, LEXEMA:else, LINHA:5, COLUNA:2)
(TOKEN:openC, LEXEMA:{, LINHA:5, COLUNA:6)
(TOKEN:write, LEXEMA:write, LINHA:6, COLUNA:2)
(TOKEN:aspas, LEXEMA:", LINHA:6, COLUNA:8)
(TOKEN:id, LEXEMA:couve, LINHA:6, COLUNA:9)
(TOKEN:id, LEXEMA:flor, LINHA:6, COLUNA:15)
(TOKEN:aspas, LEXEMA:", LINHA:6, COLUNA:19)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:6, COLUNA:20)
(TOKEN:closeC, LEXEMA:}, LINHA:7, COLUNA:1)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:7, COLUNA:2)
(TOKEN:write, LEXEMA:write, LINHA:8, COLUNA:1)
(TOKEN:aspas, LEXEMA:", LINHA:8, COLUNA:7)
(TOKEN:id, LEXEMA:numero, LINHA:8, COLUNA:8)
(TOKEN:id, LEXEMA:para, LINHA:8, COLUNA:15)
(TOKEN:id, LEXEMA:fatorial, LINHA:8, COLUNA:20)
(TOKEN:aspas, LEXEMA:", LINHA:8, COLUNA:28)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:8, COLUNA:29)
(TOKEN:read, LEXEMA:read, LINHA:9, COLUNA:1)
(TOKEN:id, LEXEMA:fatorial, LINHA:9, COLUNA:6)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:9, COLUNA:14)
(TOKEN:id, LEXEMA:f, LINHA:10, COLUNA:1)
(TOKEN:atribute, LEXEMA:=, LINHA:10, COLUNA:3)
(TOKEN:number, LEXEMA:1, LINHA:10, COLUNA:5)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:10, COLUNA:6)
(TOKEN:id, LEXEMA:i, LINHA:11, COLUNA:1)
(TOKEN:atribute, LEXEMA:=, LINHA:11, COLUNA:3)
(TOKEN:number, LEXEMA:1, LINHA:11, COLUNA:5)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:11, COLUNA:6)
(TOKEN:while, LEXEMA:while, LINHA:12, COLUNA:1)
(TOKEN:id, LEXEMA:i, LINHA:12, COLUNA:7)
(TOKEN:condicao, LEXEMA:<, LINHA:12, COLUNA:8)
(TOKEN:id, LEXEMA:fatorial, LINHA:12, COLUNA:9)
(TOKEN:openC, LEXEMA:{, LINHA:12, COLUNA:18)
(TOKEN:id, LEXEMA:f, LINHA:13, COLUNA:2)
(TOKEN:atribute, LEXEMA:=, LINHA:13, COLUNA:4)
(TOKEN:id, LEXEMA:f, LINHA:13, COLUNA:6)
(TOKEN:binary, LEXEMA:*, LINHA:13, COLUNA:7)
(TOKEN:id, LEXEMA:i, LINHA:13, COLUNA:8)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:13, COLUNA:9)
(TOKEN:id, LEXEMA:i, LINHA:14, COLUNA:2)
(TOKEN:atribute, LEXEMA:=, LINHA:14, COLUNA:4)
(TOKEN:id, LEXEMA:i, LINHA:14, COLUNA:6)
(TOKEN:unary, LEXEMA:+, LINHA:14, COLUNA:8)
(TOKEN:number, LEXEMA:1, LINHA:14, COLUNA:10)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:14, COLUNA:11)
(TOKEN:closeC, LEXEMA:}, LINHA:15, COLUNA:1)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:15, COLUNA:2)
(TOKEN:write, LEXEMA:write, LINHA:16, COLUNA:1)
(TOKEN:id, LEXEMA:f, LINHA:16, COLUNA:7)
(TOKEN:pontoVirgula, LEXEMA:;, LINHA:16, COLUNA:8)